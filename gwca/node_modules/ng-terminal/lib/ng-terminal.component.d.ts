import { OnInit, AfterViewChecked, EventEmitter, OnDestroy } from '@angular/core';
import { Terminal } from 'xterm';
import { NgTerminal } from './ng-terminal';
import { Observable } from 'rxjs';
import { DisplayOption } from './display-option';
import { ResizeEvent } from 'angular-resizable-element';
export declare class NgTerminalComponent implements OnInit, AfterViewChecked, NgTerminal, OnDestroy {
    private term;
    private keyInputSubject;
    private keyEventSubject;
    private keyInputSubjectSubscription;
    private keyEventSubjectSubscription;
    private h;
    private displayOption;
    private dataSource;
    private dataSourceSubscription;
    terminalStyle: object;
    _dataSource: any;
    _displayOption: DisplayOption;
    keyInputEmitter: EventEmitter<string>;
    keyEventEmitter: EventEmitter<{
        key: string;
        domEvent: KeyboardEvent;
    }>;
    constructor();
    private observableSetup;
    /**
     * set block or inline-block to #terminal for fitting client or outer element
     */
    private setTerminalBlock;
    /**
     * set dimensions
     */
    private setTerminalDimension;
    /**
     * remove dimensions
     */
    private removeTerminalDimension;
    /**
     * When a dimension of div changes, fit a terminal in div.
     */
    ngAfterViewChecked(): void;
    /**
     * It creates new terminal in #terminal.
     */
    ngOnInit(): void;
    /**
     * clean all resources
     */
    ngOnDestroy(): void;
    write(chars: string): void;
    setDisplayOption(opt: DisplayOption): void;
    readonly keyInput: Observable<string>;
    readonly keyEventInput: Observable<{
        key: string;
        domEvent: KeyboardEvent;
    }>;
    readonly underlying: Terminal;
    readonly isDraggableOnEdgeActivated: boolean;
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param left
     * @param top
     * @param width
     * @param height
     */
    onResizeEnd(left: number, top: number, width: number, height: number): void;
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @param re dimension to be submitted from resizable stuff
     */
    validatorFactory(): (re: ResizeEvent) => boolean;
}
