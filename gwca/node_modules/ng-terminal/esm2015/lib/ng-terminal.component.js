/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Terminal } from 'xterm';
import * as fit from 'xterm/lib/addons/fit/fit';
import { Subject } from 'rxjs';
export class NgTerminalComponent {
    constructor() {
        this.keyInputSubject = new Subject();
        this.keyEventSubject = new Subject();
        this.h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        this.displayOption = {};
        this.terminalStyle = {}; // height: (this.h / 2) + 'px' };
        this.keyInputEmitter = new EventEmitter();
        this.keyEventEmitter = new EventEmitter();
    }
    // height: (this.h / 2) + 'px' };
    /**
     * @param {?} ds
     * @return {?}
     */
    set _dataSource(ds) {
        if (this.dataSourceSubscription != null) {
            this.dataSourceSubscription.unsubscribe();
        }
        this.dataSource = ds;
        this.dataSourceSubscription = this.dataSource.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.write(data);
        }));
    }
    /**
     * @return {?}
     */
    get _dataSource() {
        return this.dataSource;
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    set _displayOption(opt) {
        this.setDisplayOption(opt);
    }
    /**
     * @private
     * @return {?}
     */
    observableSetup() {
        this.term.on('data', (/**
         * @param {?} input
         * @return {?}
         */
        (input) => {
            this.keyInputSubject.next(input);
        }));
        this.term.onKey((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.keyEventSubject.next(e);
        }));
        this.keyInputSubjectSubscription = this.keyInputSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.keyInputEmitter.emit(data);
        }));
        this.keyEventSubjectSubscription = this.keyEventSubject.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.keyEventEmitter.emit(e);
        }));
    }
    /**
     * set block or inline-block to #terminal for fitting client or outer element
     * @private
     * @param {?} isBlock
     * @return {?}
     */
    setTerminalBlock(isBlock) {
        if (isBlock)
            this.terminalStyle['display'] = 'block';
        else
            this.terminalStyle['display'] = 'inline-block';
    }
    /**
     * set dimensions
     * @private
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    setTerminalDimension(left, top, width, height) {
        this.terminalStyle['left'] = `${left}px`;
        this.terminalStyle['top'] = `${top}px`;
        this.terminalStyle['width'] = `${width}px`;
        this.terminalStyle['height'] = `${height}px`;
    }
    /**
     * remove dimensions
     * @private
     * @return {?}
     */
    removeTerminalDimension() {
        this.terminalStyle['left'] = undefined;
        this.terminalStyle['top'] = undefined;
        this.terminalStyle['width'] = undefined;
        this.terminalStyle['height'] = undefined;
    }
    /**
     * When a dimension of div changes, fit a terminal in div.
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.displayOption.fixedGrid == null)
            fit.fit(this.term);
    }
    /**
     * It creates new terminal in #terminal.
     * @return {?}
     */
    ngOnInit() {
        Terminal.applyAddon(fit); // Apply the `fit` addon   
        this.term = new Terminal();
        this.term.open(document.getElementById('terminal'));
        this.observableSetup();
    }
    /**
     * clean all resources
     * @return {?}
     */
    ngOnDestroy() {
        if (this.keyInputSubjectSubscription)
            this.keyInputSubjectSubscription.unsubscribe();
        if (this.dataSourceSubscription)
            this.dataSourceSubscription.unsubscribe();
        if (this.keyEventSubjectSubscription) {
            this.keyEventSubjectSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} chars
     * @return {?}
     */
    write(chars) {
        this.term.write(chars);
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    setDisplayOption(opt) {
        if (opt.fixedGrid != null) {
            console.debug("resizable will be ignored.");
            this.term.resize(opt.fixedGrid.cols, opt.fixedGrid.rows);
            this.setTerminalBlock(false);
            this.removeTerminalDimension();
        }
        else {
            this.removeTerminalDimension();
            this.setTerminalBlock(true);
        }
        this.displayOption = opt;
    }
    /**
     * @return {?}
     */
    get keyInput() {
        return this.keyInputSubject;
    }
    /**
     * @return {?}
     */
    get keyEventInput() {
        return this.keyEventSubject;
    }
    /**
     * @return {?}
     */
    get underlying() {
        return this.term;
    }
    /**
     * @return {?}
     */
    get isDraggableOnEdgeActivated() {
        return this.displayOption.activateDraggableOnEdge != undefined && this.displayOption.fixedGrid == undefined;
    }
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    onResizeEnd(left, top, width, height) {
        this.setTerminalDimension(left, top, width, height);
    }
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @return {?}
     */
    validatorFactory() {
        /** @type {?} */
        const comp = this;
        return (/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            /** @type {?} */
            const displayOption = comp.displayOption;
            if (displayOption.activateDraggableOnEdge) {
                /** @type {?} */
                let left = re.rectangle.left;
                /** @type {?} */
                let top = re.rectangle.top;
                /** @type {?} */
                let width = re.rectangle.width;
                /** @type {?} */
                let height = re.rectangle.height;
                if ((width < displayOption.activateDraggableOnEdge.minWidth) || (height < displayOption.activateDraggableOnEdge.minHeight)) {
                    return false;
                }
                else
                    return true;
            }
        });
    }
}
NgTerminalComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-terminal',
                template: "<global-style></global-style>\r\n\r\n<div id=\"terminal\" class=\"terminal-outer\" mwlResizable [ngStyle]=\"terminalStyle\" [validateResize]=\"validatorFactory()\" [enableGhostResize]=\"true\" [resizeEdges]=\"isDraggableOnEdgeActivated ? {bottom: true, right: true} : {bottom: false, right: false}\"\r\n(resizeEnd)=\"onResizeEnd($event.rectangle.left, $event.rectangle.top, $event.rectangle.width, $event.rectangle.height)\">\r\n</div>",
                styles: [".terminal-outer{box-sizing:border-box;border:3px solid #429bf4;height:100%}"]
            }] }
];
/** @nocollapse */
NgTerminalComponent.ctorParameters = () => [];
NgTerminalComponent.propDecorators = {
    _dataSource: [{ type: Input, args: ['dataSource',] }],
    _displayOption: [{ type: Input, args: ['displayOption',] }],
    keyInputEmitter: [{ type: Output, args: ['keyInput',] }],
    keyEventEmitter: [{ type: Output, args: ['keyEvent',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.term;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.h;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.displayOption;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSourceSubscription;
    /** @type {?} */
    NgTerminalComponent.prototype.terminalStyle;
    /** @type {?} */
    NgTerminalComponent.prototype.keyInputEmitter;
    /** @type {?} */
    NgTerminalComponent.prototype.keyEventEmitter;
}
//# sourceMappingURL=data:application/json;base64,