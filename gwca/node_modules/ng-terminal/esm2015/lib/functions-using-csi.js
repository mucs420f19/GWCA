/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * It is a CSI sequences generator
 * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_
 * @type {?}
 */
let CSI = '\x9b';
export class FunctionsUsingCSI {
    /**
     *  CSI Ps \@  Insert Ps (Blank) Character(s) (default = 1) (ICH).
     *
     *
     * @param {?} count
     * @return {?}
     */
    static insertBlank(count) {
        return `${CSI}${count}@`;
    }
    /**
         *  CSI Ps SP @ */
    /**
     *  CSI Ps A  Cursor Up Ps Times (default = 1) (CUU).
     * \x9b3A
     * @param {?} count
     * @return {?}
     */
    static cursorUp(count) {
        return `${CSI}${count}A`;
    }
    /**
         *  CSI Ps SP A */
    /**
     *  CSI Ps B  Cursor Down Ps Times (default = 1) (CUD).
     * \x9b3B
     * @param {?} count
     * @return {?}
     */
    static cursorDown(count) {
        return `${CSI}${count}B`;
    }
    /**
     *  CSI Ps C  Cursor Forward Ps Times (default = 1) (CUF).
     * \x9b3C
     * @param {?} count
     * @return {?}
     */
    static cursorForward(count) {
        return `${CSI}${count}C`;
    }
    /**
     *  CSI Ps D  Cursor Backward Ps Times (default = 1) (CUB).
     * \x9b3D
     * @param {?} count
     * @return {?}
     */
    static cursorBackward(count) {
        return `${CSI}${count}D`;
    }
    /**
     *  CSI Ps E  Cursor Next Line Ps Times (default = 1) (CNL).
     * \x9b3E
     *
     * @param {?} count
     * @return {?}
     */
    static cursorNextLine(count) {
        return `${CSI}${count}E`;
    }
    /**
     *  CSI Ps F  Cursor Preceding Line Ps Times (default = 1) (CPL).
     * \x9b3F
     *
     * @param {?} count
     * @return {?}
     */
    static cursorPrecedingLine(count) {
        return `${CSI}${count}F`;
    }
    /**
     *  CSI Ps G  Cursor Character Absolute  [column] (default = [row,1]) (CHA).
     *  \x9b9G
     *
     * @param {?} count
     * @return {?}
     */
    static cursorColumn(count) {
        return `${CSI}${count}G`;
    }
    /**
     *  CSI Ps ; Ps H  Cursor Position [row;column] (default = [1,1]) (CUP).
     * \x9b2;2H
     *
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    static cursorPosition(row, col) {
        return `${CSI}${row};${col}H`;
    }
    /**
         *  CSI Ps I  Cursor Forward Tabulation Ps tab stops (default = 1) (CHT). */
    /**
     *  CSI Ps J  Erase in Display (ED), VT100.
     *      Ps = 0  -> Erase Below (default).
     *      Ps = 1  -> Erase Above.
     *      Ps = 2  -> Erase All.
     *      Ps = 3  -> Erase Saved Lines (xterm).
     * \x9b2J
     *
     * @param {?} category
     * @return {?}
     */
    static eraseInDisplay(category) {
        return `${CSI}${category}J`;
    }
    /**
     *  CSI ? Ps J
     *  Erase in Display (DECSED), VT220.
     *    Ps = 0  -> Selective Erase Below (default).
     *    Ps = 1  -> Selective Erase Above.
     *    Ps = 2  -> Selective Erase All.
     *    Ps = 3  -> Selective Erase Saved Lines (xterm).
     * \x9b?2J
     *
     * @param {?} category
     * @return {?}
     */
    static eraseSelectiveThingsInDisplay(category) {
        return `${CSI}?${category}J`;
    }
    /**
     *  CSI Ps K
     *   Erase in Line (EL), VT100.
     *     Ps = 0  -> Erase to Right (default).
     *     Ps = 1  -> Erase to Left.
     *     Ps = 2  -> Erase All.
     * \x9b?1K
     *
     * @param {?} category
     * @return {?}
     */
    static eraseInLine(category) {
        return `${CSI}${category}K`;
    }
    /**
     *  CSI ? Ps K
     *    Erase in Line (DECSEL), VT220.
     *      Ps = 0  -> Selective Erase to Right (default).
     *      Ps = 1  -> Selective Erase to Left.
     *      Ps = 2  -> Selective Erase All.
     * \x9b?1K
     *
     * @param {?} category
     * @return {?}
     */
    static eraseSelectiveThingsInLine(category) {
        return `${CSI}?${category}K`;
    }
    /**
     *  CSI Ps L  Insert Ps Line(s) (default = 1) (IL).
     * \x9b2L
     *
     * @param {?} count
     * @return {?}
     */
    static insertLines(count) {
        return `${CSI}${count}L`;
    }
    /**
     *  CSI Ps M  Delete Ps Line(s) (default = 1) (DL).
     * \x9b2M
     *
     * @param {?} count
     * @return {?}
     */
    static deleteLines(count) {
        return `${CSI}${count}M`;
    }
    /**
     *  CSI Ps P  Delete Ps Character(s) (default = 1) (DCH).
     * \x9b2P
     *
     * @param {?} count
     * @return {?}
     */
    static deleteCharacter(count) {
        return `${CSI}${count}P`;
    }
    /**
     *  CSI Ps S  Scroll up Ps lines (default = 1) (SU), VT420, ECMA-48.
     * \x9b2S
     *
     * @param {?} count
     * @return {?}
     */
    static scrollUpLines(count) {
        return `${CSI}${count}S`;
    }
    /**
         *  CSI ? Pi ; Pa ; Pv S */
    /**
     *  CSI Ps T  Scroll down Ps lines (default = 1) (SD), VT420.
     * \x9b2T
     *
     * @param {?} count
     * @return {?}
     */
    static scrollDownLines(count) {
        return `${CSI}${count}T`;
    }
    /**
         *  CSI Ps ; Ps ; Ps ; Ps ; Ps T */
    /**
         *  CSI > Ps ; Ps T */
    /**
     *  CSI Ps X  Erase Ps Character(s) (default = 1) (ECH).
     * \x9b2X
     *
     * @param {?} count
     * @return {?}
     */
    static eraseCharacters(count) {
        return `${CSI}${count}X`;
    }
}
/** @enum {number} */
const KindOfEraseInDisplay = {
    Below: 0, Above: 1, All: 2, SavedLines: 3,
};
export { KindOfEraseInDisplay };
KindOfEraseInDisplay[KindOfEraseInDisplay.Below] = 'Below';
KindOfEraseInDisplay[KindOfEraseInDisplay.Above] = 'Above';
KindOfEraseInDisplay[KindOfEraseInDisplay.All] = 'All';
KindOfEraseInDisplay[KindOfEraseInDisplay.SavedLines] = 'SavedLines';
/** @enum {number} */
const KindOfEraseInLine = {
    Right: 0, Left: 1, All: 2,
};
export { KindOfEraseInLine };
KindOfEraseInLine[KindOfEraseInLine.Right] = 'Right';
KindOfEraseInLine[KindOfEraseInLine.Left] = 'Left';
KindOfEraseInLine[KindOfEraseInLine.All] = 'All';
//# sourceMappingURL=data:application/json;base64,