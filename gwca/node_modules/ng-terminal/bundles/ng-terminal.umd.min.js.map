{"version":3,"sources":["ng://ng-terminal/lib/ng-terminal.service.ts","ng://ng-terminal/lib/ng-terminal.component.ts","ng://ng-terminal/lib/global-style/global-style.component.ts","ng://ng-terminal/lib/ng-terminal.module.ts","ng://ng-terminal/lib/functions-using-csi.ts"],"names":["NgTerminalService","Injectable","args","providedIn","NgTerminalComponent","this","keyInputSubject","Subject","keyEventSubject","h","Math","max","document","documentElement","clientHeight","window","innerHeight","displayOption","terminalStyle","keyInputEmitter","EventEmitter","keyEventEmitter","Object","defineProperty","prototype","dataSource","ds","_this","dataSourceSubscription","unsubscribe","subscribe","data","write","opt","setDisplayOption","observableSetup","term","on","input","next","onKey","e","keyInputSubjectSubscription","emit","keyEventSubjectSubscription","setTerminalBlock","isBlock","setTerminalDimension","left","top","width","height","removeTerminalDimension","undefined","ngAfterViewChecked","fixedGrid","fit.fit","ngOnInit","Terminal","applyAddon","fit","open","getElementById","ngOnDestroy","chars","console","debug","resize","cols","rows","activateDraggableOnEdge","onResizeEnd","validatorFactory","comp","re","rectangle","minWidth","minHeight","Component","selector","template","Input","Output","GlobalStyleComponent","encapsulation","ViewEncapsulation","None","NgTerminalModule","NgModule","declarations","imports","ResizableModule","CommonModule","exports","FunctionsUsingCSI","insertBlank","count","cursorUp","cursorDown","cursorForward","cursorBackward","cursorNextLine","cursorPrecedingLine","cursorColumn","cursorPosition","row","col","eraseInDisplay","category","eraseSelectiveThingsInDisplay","CSI","eraseInLine","eraseSelectiveThingsInLine","insertLines","deleteLines","deleteCharacter","scrollUpLines","scrollDownLines","eraseCharacters","Below","Above","All","SavedLines","Right","Left"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgTerminalService {\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { Component, OnInit, AfterViewChecked, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { Terminal } from 'xterm';\r\nimport * as fit from 'xterm/lib/addons/fit/fit';\r\nimport { NgTerminal } from './ng-terminal';\r\nimport { Subject, Observable, Subscription } from 'rxjs';\r\nimport { DisplayOption } from './display-option';\r\nimport { ResizeEvent } from 'angular-resizable-element';\r\n\r\n@Component({\r\n  selector: 'ng-terminal',\r\n  templateUrl: './ng-terminal.component.html',\r\n  styleUrls: ['./ng-terminal.component.css']\r\n})\r\nexport class NgTerminalComponent implements OnInit, AfterViewChecked, NgTerminal, OnDestroy {\r\n  private term: Terminal\r\n  private keyInputSubject: Subject<string> = new Subject<string>();\r\n  private keyEventSubject = new Subject<{key: string; domEvent: KeyboardEvent;}>();\r\n  \r\n  \r\n  private keyInputSubjectSubscription: Subscription;\r\n  private keyEventSubjectSubscription: Subscription;\r\n  private h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\r\n  private displayOption: DisplayOption = {};\r\n  private dataSource: Observable<string>;\r\n  private dataSourceSubscription: Subscription;\r\n  terminalStyle: object = {};// height: (this.h / 2) + 'px' };\r\n  \r\n  @Input('dataSource')\r\n  set _dataSource(ds) {\r\n    if(this.dataSourceSubscription != null){\r\n      this.dataSourceSubscription.unsubscribe();\r\n    }\r\n    this.dataSource = ds;\r\n    this.dataSourceSubscription = this.dataSource.subscribe((data) => {\r\n      this.write(data);\r\n    })\r\n  }\r\n  get _dataSource() {\r\n    return this.dataSource;\r\n  }\r\n\r\n  @Input('displayOption')\r\n  set _displayOption(opt: DisplayOption){\r\n    this.setDisplayOption(opt);\r\n  }\r\n\r\n  @Output('keyInput')\r\n  keyInputEmitter  = new EventEmitter<string>();\r\n\r\n  @Output('keyEvent')\r\n  keyEventEmitter  = new EventEmitter<{key: string; domEvent: KeyboardEvent;}>();\r\n\r\n  constructor() { }\r\n\r\n  private observableSetup(){\r\n    this.term.on('data', (input) => {\r\n      this.keyInputSubject.next(input);\r\n    });\r\n    this.term.onKey(e => {\r\n      this.keyEventSubject.next(e);\r\n    })\r\n    this.keyInputSubjectSubscription = this.keyInputSubject.subscribe((data) => {\r\n      this.keyInputEmitter.emit(data);\r\n    })\r\n    this.keyEventSubjectSubscription = this.keyEventSubject.subscribe((e) => {\r\n      this.keyEventEmitter.emit(e);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * set block or inline-block to #terminal for fitting client or outer element\r\n   */\r\n  private setTerminalBlock(isBlock: boolean){\r\n    if(isBlock)\r\n      this.terminalStyle['display'] = 'block';\r\n    else\r\n      this.terminalStyle['display'] = 'inline-block';\r\n  }\r\n\r\n  /**\r\n   * set dimensions\r\n   */\r\n  private setTerminalDimension(left: number, top: number, width: number, height: number) {\r\n    this.terminalStyle['left'] = `${left}px`;\r\n    this.terminalStyle['top'] = `${top}px`;\r\n    this.terminalStyle['width'] = `${width}px`;\r\n    this.terminalStyle['height'] = `${height}px`;\r\n  }\r\n  \r\n  /**\r\n   * remove dimensions\r\n   */\r\n  private removeTerminalDimension(){\r\n    this.terminalStyle['left'] = undefined;\r\n    this.terminalStyle['top'] = undefined;\r\n    this.terminalStyle['width'] = undefined;\r\n    this.terminalStyle['height'] = undefined;\r\n  }\r\n\r\n  /**\r\n   * When a dimension of div changes, fit a terminal in div.\r\n   */\r\n  ngAfterViewChecked() {\r\n    if(this.displayOption.fixedGrid == null)\r\n      fit.fit(this.term);\r\n  }\r\n\r\n  /**\r\n   * It creates new terminal in #terminal.\r\n   */\r\n  ngOnInit() {\r\n    Terminal.applyAddon(fit);  // Apply the `fit` addon   \r\n    this.term = new Terminal();\r\n    this.term.open(document.getElementById('terminal'));\r\n    this.observableSetup();\r\n  }\r\n\r\n  /**\r\n   * clean all resources\r\n   */\r\n  ngOnDestroy(): void {\r\n    if(this.keyInputSubjectSubscription)\r\n      this.keyInputSubjectSubscription.unsubscribe();\r\n    if(this.dataSourceSubscription)\r\n      this.dataSourceSubscription.unsubscribe();\r\n    if(this.keyEventSubjectSubscription){\r\n      this.keyEventSubjectSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  write(chars: string) {\r\n    this.term.write(chars);\r\n  }\r\n  \r\n  setDisplayOption(opt: DisplayOption){\r\n    if(opt.fixedGrid != null){\r\n      console.debug(\"resizable will be ignored.\")\r\n      this.term.resize(opt.fixedGrid.cols, opt.fixedGrid.rows);\r\n      this.setTerminalBlock(false);\r\n      this.removeTerminalDimension();\r\n    }else{\r\n      this.removeTerminalDimension();\r\n      this.setTerminalBlock(true);\r\n    }\r\n    this.displayOption = opt;\r\n  }\r\n\r\n  get keyInput(): Observable<string> {\r\n    return this.keyInputSubject;\r\n  }\r\n\r\n  get keyEventInput(): Observable<{key: string; domEvent: KeyboardEvent;}> {\r\n    return this.keyEventSubject;\r\n  }\r\n\r\n  get underlying(): Terminal {\r\n    return this.term;\r\n  }\r\n\r\n  get isDraggableOnEdgeActivated() {\r\n    return this.displayOption.activateDraggableOnEdge != undefined && this.displayOption.fixedGrid == undefined;\r\n  }\r\n\r\n  /**\r\n   * After user coordinate dimensions of terminal, it's called.\r\n   * @param left \r\n   * @param top \r\n   * @param width \r\n   * @param height \r\n   */\r\n  onResizeEnd(left: number, top: number, width: number, height: number): void {\r\n    this.setTerminalDimension(left, top, width, height);\r\n  }\r\n\r\n  /**\r\n   * Before onResizeEnd is called, it valiates dimensions to change.\r\n   * @param re dimension to be submitted from resizable stuff\r\n   */\r\n  validatorFactory(): (re: ResizeEvent) => boolean {\r\n    const comp = this;\r\n    return (re: ResizeEvent) =>{ \r\n      const displayOption = comp.displayOption;\r\n      if(displayOption.activateDraggableOnEdge){\r\n        let left = re.rectangle.left, top = re.rectangle.top, width = re.rectangle.width, height = re.rectangle.height;\r\n        if ((width < displayOption.activateDraggableOnEdge.minWidth) || (height < displayOption.activateDraggableOnEdge.minHeight)) {\r\n          return false;\r\n        } else return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'global-style',\r\n  templateUrl: './global-style.component.html',\r\n  styleUrls: ['../../../../../node_modules/xterm/dist/xterm.css'],  //global styles\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GlobalStyleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgTerminalComponent } from './ng-terminal.component';\r\nimport { ResizableModule } from 'angular-resizable-element';\r\nimport { GlobalStyleComponent } from './global-style/global-style.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [NgTerminalComponent, GlobalStyleComponent],\r\n  imports: [\r\n    ResizableModule, CommonModule\r\n  ],\r\n  exports: [NgTerminalComponent]\r\n})\r\nexport class NgTerminalModule { }\r\n","/**\r\n *\r\n * It is a CSI sequences generator\r\n * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_\r\n */\r\nlet CSI = '\\x9b'\r\nexport class FunctionsUsingCSI {\r\n    /**\r\n     *  CSI Ps @  Insert Ps (Blank) Character(s) (default = 1) (ICH). \r\n     * \r\n     * */\r\n    static insertBlank(count: number){\r\n        return `${CSI}${count}@`; \r\n    }\r\n    /**\r\n     *  CSI Ps SP @ */\r\n    /**\r\n     *  CSI Ps A  Cursor Up Ps Times (default = 1) (CUU). \r\n     * \\x9b3A*/\r\n    static cursorUp(count: number){\r\n        return `${CSI}${count}A`;\r\n    }\r\n    /**\r\n     *  CSI Ps SP A */\r\n    /**\r\n     *  CSI Ps B  Cursor Down Ps Times (default = 1) (CUD).\r\n     * \\x9b3B */\r\n    static cursorDown(count: number){\r\n        return `${CSI}${count}B`;\r\n    }\r\n    /**\r\n     *  CSI Ps C  Cursor Forward Ps Times (default = 1) (CUF). \r\n     * \\x9b3C */\r\n    static cursorForward(count: number){\r\n        return `${CSI}${count}C`;\r\n    }\r\n    /**\r\n     *  CSI Ps D  Cursor Backward Ps Times (default = 1) (CUB). \r\n     * \\x9b3D */\r\n    static cursorBackward(count: number){\r\n        return `${CSI}${count}D`;\r\n    }\r\n    /**\r\n     *  CSI Ps E  Cursor Next Line Ps Times (default = 1) (CNL). \r\n     * \\x9b3E\r\n     * */\r\n    static cursorNextLine(count: number){\r\n        return `${CSI}${count}E`;\r\n    }\r\n    /**\r\n     *  CSI Ps F  Cursor Preceding Line Ps Times (default = 1) (CPL).\r\n     * \\x9b3F\r\n     *  */\r\n    static cursorPrecedingLine(count: number){\r\n        return `${CSI}${count}F`;\r\n    }\r\n    /**\r\n     *  CSI Ps G  Cursor Character Absolute  [column] (default = [row,1]) (CHA).\r\n     *  \\x9b9G\r\n     *  */\r\n    static cursorColumn(count: number){\r\n        return `${CSI}${count}G`;\r\n    }\r\n    /**\r\n     *  CSI Ps ; Ps H  Cursor Position [row;column] (default = [1,1]) (CUP).\r\n     * \\x9b2;2H\r\n     * */\r\n    static cursorPosition(row: number, col: number){\r\n        return `${CSI}${row};${col}H`;\r\n    }\r\n    /**\r\n     *  CSI Ps I  Cursor Forward Tabulation Ps tab stops (default = 1) (CHT). */\r\n    /**\r\n     *  CSI Ps J  Erase in Display (ED), VT100.\r\n     *      Ps = 0  -> Erase Below (default).\r\n     *      Ps = 1  -> Erase Above.\r\n     *      Ps = 2  -> Erase All.\r\n     *      Ps = 3  -> Erase Saved Lines (xterm).\r\n     * \\x9b2J\r\n     *  */\r\n    static eraseInDisplay(category: KindOfEraseInDisplay){\r\n        return `${CSI}${category}J`;\r\n    }\r\n\r\n    /**\r\n     *  CSI ? Ps J\r\n     *  Erase in Display (DECSED), VT220.\r\n     *    Ps = 0  -> Selective Erase Below (default).\r\n     *    Ps = 1  -> Selective Erase Above.\r\n     *    Ps = 2  -> Selective Erase All.\r\n     *    Ps = 3  -> Selective Erase Saved Lines (xterm).\r\n     * \\x9b?2J \r\n     * */\r\n    static eraseSelectiveThingsInDisplay(category: KindOfEraseInDisplay){\r\n        return `${CSI}?${category}J`;\r\n    }\r\n    /**\r\n     *  CSI Ps K  \r\n     *   Erase in Line (EL), VT100.\r\n     *     Ps = 0  -> Erase to Right (default).\r\n     *     Ps = 1  -> Erase to Left.\r\n     *     Ps = 2  -> Erase All.\r\n     * \\x9b?1K\r\n     * */\r\n    static eraseInLine(category: KindOfEraseInLine){\r\n        return `${CSI}${category}K`;\r\n    }\r\n    /**\r\n     *  CSI ? Ps K \r\n     *    Erase in Line (DECSEL), VT220.\r\n     *      Ps = 0  -> Selective Erase to Right (default).\r\n     *      Ps = 1  -> Selective Erase to Left.\r\n     *      Ps = 2  -> Selective Erase All.\r\n     * \\x9b?1K\r\n     * */\r\n    static eraseSelectiveThingsInLine(category: KindOfEraseInLine){\r\n        return `${CSI}?${category}K`;\r\n    }\r\n    /**\r\n     *  CSI Ps L  Insert Ps Line(s) (default = 1) (IL).\r\n     * \\x9b2L\r\n     *  */\r\n    static insertLines(count: number){\r\n        return `${CSI}${count}L`;\r\n    }\r\n    /**\r\n     *  CSI Ps M  Delete Ps Line(s) (default = 1) (DL).\r\n     * \\x9b2M\r\n     *  */\r\n    static deleteLines(count: number){\r\n        return `${CSI}${count}M`;\r\n    }\r\n    /**\r\n     *  CSI Ps P  Delete Ps Character(s) (default = 1) (DCH).\r\n     * \\x9b2P\r\n     *  */\r\n    static deleteCharacter(count: number){\r\n        return `${CSI}${count}P`;\r\n    }\r\n    /**\r\n     *  CSI Ps S  Scroll up Ps lines (default = 1) (SU), VT420, ECMA-48.\r\n     * \\x9b2S\r\n     *  */\r\n    static scrollUpLines(count: number){\r\n        return `${CSI}${count}S`;\r\n    }\r\n    /**\r\n     *  CSI ? Pi ; Pa ; Pv S */\r\n    /**\r\n     *  CSI Ps T  Scroll down Ps lines (default = 1) (SD), VT420. \r\n     * \\x9b2T\r\n     * */\r\n    static scrollDownLines(count: number){\r\n        return `${CSI}${count}T`;\r\n    }\r\n    /**\r\n     *  CSI Ps ; Ps ; Ps ; Ps ; Ps T */\r\n    /**\r\n     *  CSI > Ps ; Ps T */\r\n    /**\r\n     *  CSI Ps X  Erase Ps Character(s) (default = 1) (ECH).\r\n     * \\x9b2X\r\n     *  */\r\n    static eraseCharacters(count: number){\r\n        return `${CSI}${count}X`;\r\n    }\r\n    /**\r\n     *  CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT). */\r\n    /**\r\n     *  CSI Ps ^  Scroll down Ps lines (default = 1) (SD), ECMA-48. */\r\n    /**\r\n     *  CSI Pm `  Character Position Absolute  [column] (default = [row,1]) */\r\n    /**\r\n     *  CSI Pm a  Character Position Relative  [columns] (default = [row,col+1]) */\r\n    /**\r\n     *  CSI Ps b  Repeat the preceding graphic character Ps times (REP). */\r\n    /**\r\n     *  CSI Ps c  Send Device Attributes (Primary DA). */\r\n    /**\r\n     *  CSI = Ps c */\r\n    /**\r\n     *  CSI > Ps c */\r\n    /**\r\n     *  CSI Pm d  Line Position Absolute  [row] (default = [1,column]) (VPA). */\r\n    /**\r\n     *  CSI Pm e  Line Position Relative  [rows] (default = [row+1,column]) */\r\n    /**\r\n     *  CSI Ps ; Ps f */\r\n    /**\r\n     *  CSI Ps g  Tab Clear (TBC). */\r\n    /**\r\n     *  CSI Pm h  Set Mode (SM). */\r\n    /**\r\n     *  CSI ? Pm h */\r\n    /**\r\n     *  CSI Pm i  Media Copy (MC). */\r\n    /**\r\n     *  CSI ? Pm i */\r\n    /**\r\n     *  CSI Pm l  Reset Mode (RM). */\r\n    /**\r\n     *  CSI ? Pm l */\r\n    /**\r\n     *  CSI Pm m  Character Attributes (SGR). */\r\n    /**\r\n     *  CSI > Ps ; Ps m */\r\n    /**\r\n     *  CSI Ps n  Device Status Report (DSR). */\r\n    /**\r\n     *  CSI > Ps n */\r\n    /**\r\n     *  CSI ? Ps n */\r\n    /**\r\n     *  CSI > Ps p */\r\n    /**\r\n     *  CSI ! p   Soft terminal reset (DECSTR), VT220 and up. */\r\n    /**\r\n     *  CSI Ps ; Ps \" p */\r\n    /**\r\n     *  CSI Ps $ p */\r\n    /**\r\n     *  CSI ? Ps $ p */\r\n    /**\r\n     *  CSI # p */\r\n    /**\r\n     *  CSI Ps ; Ps # p */\r\n    /**\r\n     *  CSI Ps q  Load LEDs (DECLL), VT100. */\r\n    /**\r\n     *  CSI Ps SP q */\r\n    /**\r\n     *  CSI Ps \" q */\r\n    /**\r\n     *  CSI # q   Pop video attributes from stack (XTPOPSGR), xterm.  This is an */\r\n    /**\r\n     *  CSI Ps ; Ps r */\r\n    /**\r\n     *  CSI ? Pm r */\r\n    /**\r\n     *  CSI Pt ; Pl ; Pb ; Pr ; Ps $ r */\r\n    /**\r\n     *  CSI s     Save cursor, available only when DECLRMM is disabled (SCOSC, */\r\n    /**\r\n     *  CSI Pl ; Pr s */\r\n    /**\r\n     *  CSI ? Pm s */\r\n    /**\r\n     *  CSI Ps ; Ps ; Ps t */\r\n    /**\r\n     *  CSI > Ps ; Ps t */\r\n    /**\r\n     *  CSI Ps SP t */\r\n    /**\r\n     *  CSI Pt ; Pl ; Pb ; Pr ; Ps $ t */\r\n    /**\r\n     *  CSI u     Restore cursor (SCORC, also ANSI.SYS). */\r\n    /**\r\n     *  CSI Ps SP u */\r\n    /**\r\n     *  CSI Pt ; Pl ; Pb ; Pr ; Pp ; Pt ; Pl ; Pp $ v */\r\n    /**\r\n     *  CSI Ps $ w */\r\n    /**\r\n     *  CSI Pt ; Pl ; Pb ; Pr ' w */\r\n    /**\r\n     *  CSI Ps x  Request Terminal Parameters (DECREQTPARM). */\r\n    /**\r\n     *  CSI Ps * x */\r\n    /**\r\n     *  CSI Pc ; Pt ; Pl ; Pb ; Pr $ x */\r\n    /**\r\n     *  CSI Ps # y */\r\n    /**\r\n     *  CSI Pi ; Pg ; Pt ; Pl ; Pb ; Pr * y */\r\n    /**\r\n     *  CSI Ps ; Pu ' z */\r\n    /**\r\n     *  CSI Pt ; Pl ; Pb ; Pr $ z */\r\n    /**\r\n     *  CSI Pm ' { */\r\n    /**\r\n     *  CSI # { */\r\n    /**\r\n     *  CSI Ps ; Ps # { */\r\n    /**\r\n     *  CSI Pt ; Pl ; Pb ; Pr $ { */\r\n    /**\r\n     *  CSI Pt ; Pl ; Pb ; Pr # | */\r\n    /**\r\n     *  CSI Ps $ | */\r\n    /**\r\n     *  CSI Ps ' | */\r\n    /**\r\n     *  CSI Ps * | */\r\n    /**\r\n     *  CSI # }   Pop video attributes from stack (XTPOPSGR), xterm.  Popping */\r\n    /**\r\n     *  CSI Pm ' } */\r\n    /**\r\n     *  CSI Pm ' ~ */\r\n}\r\nexport enum KindOfEraseInDisplay{\r\n    Below=0, Above=1, All=2, SavedLines=3\r\n}\r\nexport enum KindOfEraseInLine{\r\n    Right=0, Left=1, All=2\r\n}"]}